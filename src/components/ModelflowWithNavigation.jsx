// src/components/ModelflowWithNavigation.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Rotate3d } from 'lucide-react';
import ModelflowInterface from './SearchInterface';
import { MeshyApiService } from '../services/meshyApi';
import { useMeshyTask } from '../hooks/useMeshyTask';

const meshyApi = new MeshyApiService(process.env.REACT_APP_MESHY_API_KEY);

const ModelflowWithNavigation = () => {
  const navigate = useNavigate();
  const [currentTaskId, setCurrentTaskId] = useState(null);
  const [errorMessage, setErrorMessage] = useState(null);
  
  const { task, error, isLoading } = useMeshyTask(meshyApi, currentTaskId);

  // Watch for task completion and handle navigation
  useEffect(() => {
    if (task && task.status === 'SUCCEEDED' && task.model_urls?.glb) {
      console.log('Task completed successfully:', task);
      navigate('/editor', {
        state: {
          modelUrl: task.model_urls.glb,
          modelDetails: {
            name: task.prompt || 'Generated Model',
            format: 'GLB',
            size: 'Generated by Meshy',
            created: new Date(task.created_at).toLocaleDateString()
          }
        },
        replace: true
      });
    } else if (task?.status === 'FAILED') {
      setErrorMessage(task.task_error?.message || 'Model generation failed');
    }
  }, [task, navigate]);

  const handleSearch = async (query) => {
    try {
      setErrorMessage(null);
      setCurrentTaskId(null); // Reset current task
      
      // Step 1: Create preview task
      const previewTaskId = await meshyApi.createPreviewTask(query);
      console.log('Preview task created:', previewTaskId);
      setCurrentTaskId(previewTaskId);

      // Wait for preview task to complete
      let previewTask;
      do {
        await new Promise(resolve => setTimeout(resolve, 2000));
        previewTask = await meshyApi.getTaskStatus(previewTaskId);
        console.log('Preview task status:', previewTask);
      } while (previewTask.status === 'PENDING' || previewTask.status === 'IN_PROGRESS');

      if (previewTask.status === 'SUCCEEDED') {
        // Step 2: Create refine task
        // const refineTaskId = await meshyApi.createRefineTask(previewTaskId);
        // console.log('Refine task created:', refineTaskId);
        // setCurrentTaskId(refineTaskId);
      } else {
        throw new Error(previewTask.task_error?.message || 'Preview task failed');
      }
    } catch (error) {
      console.error('Search process failed:', error);
      setErrorMessage(error.message || 'Failed to generate 3D model');
    }
  };

  return (
    <>
      <ModelflowInterface 
        onSearch={handleSearch} 
        onRandom={() => {}} 
      />
      {isLoading && currentTaskId && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center">
          <div className="bg-gray-800 p-6 rounded-lg">
            <div className="animate-spin mb-4">
              <Rotate3d className="w-8 h-8 text-blue-500" />
            </div>
            <p className="text-white text-center">
              Generating your 3D model...
              {task?.progress !== undefined && ` (${task.progress}%)`}
            </p>
          </div>
        </div>
      )}
      {errorMessage && (
        <div className="fixed bottom-4 right-4 bg-red-500 text-white px-6 py-4 rounded-lg shadow-lg">
          <p className="font-semibold">Error</p>
          <p>{errorMessage}</p>
          <button 
            onClick={() => setErrorMessage(null)}
            className="absolute top-2 right-2 text-white hover:text-gray-200"
          >
            Ã—
          </button>
        </div>
      )}
    </>
  );
};

export default ModelflowWithNavigation;

