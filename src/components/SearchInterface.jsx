// ModelflowInterface.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { SearchIcon, Package, Pencil, AlertCircle } from 'lucide-react';
import logo from '../images/modelflow.png';
import DrawingCanvas from './CanvasDrawing';


const searchPhrases = [
  "A teddy bear wearing santa hat...",
  "A cyberpunk city at night...",
  "A magical forest with fairies...",
  "An astronaut on Mars...",
  "A steampunk watch mechanism..."
];

const ModelflowInterface = ({ onSearch, onRandom }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [displayText, setDisplayText] = useState('');
  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);
  const [showTooltip, setShowTooltip] = useState(false);
  const [isTyping, setIsTyping] = useState(true);
  const [showDrawing, setShowDrawing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const navigate = useNavigate();


  // ... keep existing useEffect for typing animation ...
  useEffect(() => {
    if (isTyping) {
      if (displayText.length < searchPhrases[currentPhraseIndex].length) {
        const timeout = setTimeout(() => {
          setDisplayText(searchPhrases[currentPhraseIndex].slice(0, displayText.length + 1));
        }, 100);
        return () => clearTimeout(timeout);
      } else {
        const timeout = setTimeout(() => setIsTyping(false), 7000);
        return () => clearTimeout(timeout);
      }
    } else {
      if (displayText.length > 0) {
        const timeout = setTimeout(() => {
          setDisplayText(displayText.slice(0, -1));
        }, 50);
        return () => clearTimeout(timeout);
      } else {
        setCurrentPhraseIndex((prev) => (prev + 1) % searchPhrases.length);
        setIsTyping(true);
      }
    }
  }, [displayText, currentPhraseIndex, isTyping]);

  const handleSearch = (e) => {
    e.preventDefault();
    onSearch(searchQuery || displayText);
  };
  const handleImageReady = async (imageData) => {
    setShowDrawing(false);
    setIsLoading(true);
    setError(null);
    console.log("api", `${process.env.REACT_APP_API_BASE_URL}/api/image-to-3d`)

    try {
      // Make the API request to create image-to-3d task
      const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/image-to-3d`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          imageData,
          artStyle: 'realistic',
          aiModel: 'meshy-4'
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.details || 'Failed to process image');
      }

      const data = await response.json();
      const taskId = data.result;

      // Poll for task completion
      let taskStatus;
      do {
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const statusResponse = await fetch(
          `${process.env.REACT_APP_API_BASE_URL}/api/text-to-3d/${taskId}`
        );
        
        if (!statusResponse.ok) {
          throw new Error('Failed to check task status');
        }
        
        taskStatus = await statusResponse.json();
        
        if (taskStatus.status === 'FAILED') {
          throw new Error(taskStatus.task_error?.message || 'Task failed');
        }
      } while (taskStatus.status === 'PENDING' || taskStatus.status === 'IN_PROGRESS');

      // Navigate to editor with the generated model
      if (taskStatus.status === 'SUCCEEDED') {
        navigate('/editor', {
          state: {
            modelUrl: taskStatus.model_urls.glb,
            taskId: taskStatus.id,
            modelDetails: {
              name: 'Generated from Image',
              format: 'GLB',
              size: 'Generated by Meshy',
              created: new Date(taskStatus.created_at).toLocaleDateString()
            }
          },
          replace: true
        });
      }
    } catch (error) {
      console.error('Image processing failed:', error);
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };


  return (
    <div className="min-h-screen bg-[#1a1d21] relative overflow-hidden">
      {/* Background grid (keep existing style) */}
      <div className="absolute inset-0 overflow-hidden">
        <div 
          className="absolute w-[300vw] h-[200vh]"
          style={{
            backgroundColor: '#1a1d21',
            backgroundImage: `
              linear-gradient(90deg, rgba(255,255,255,0.05) 1px, transparent 1px),
              linear-gradient(rgba(255,255,255,0.05) 1px, transparent 1px)
            `,
            backgroundSize: '64px 64px',
            transform: 'perspective(1000px) rotateX(60deg) scale(0.9)',
            transformOrigin: 'center center',
            backgroundPosition: 'center center',
            left: '-100vw',
            top: '-70vh'
          }}
        />
      </div>

      {/* Content */}
      <div className="absolute inset-0 flex flex-col items-center justify-center px-4">
        <div className="w-full max-w-4xl flex flex-col items-center">
          {/* Logo section */}
          <div className="mb-12 flex items-center gap-4">
            <img src={logo} alt="Modelflow Logo" className="w-24 h-22" />
            <div className="flex flex-col -space-y-1">
              <h1 className="text-white text-7xl font-bold tracking-wide leading-none">MODELFLOW</h1>
              <p className="text-gray-400 text-lg">Where ideas become reality.</p>
            </div>
          </div>
          
          {/* Search form */}
          <form onSubmit={handleSearch} className="flex items-center gap-4 w-full max-w-2xl">
            <div className="relative flex-grow">
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder={displayText}
                className="w-full bg-gray-700/50 text-white placeholder-gray-400 px-4 py-3 rounded-lg focus:outline-none focus:ring-0 transition-all pr-12"
              />
              <button 
                type="submit"
                className="absolute right-2 top-1/2 transform -translate-y-1/2 p-2 hover:bg-gray-600/50 rounded-full transition-colors"
              >
                <SearchIcon className="w-6 h-6 text-gray-400" />
              </button>
            </div>
            
            {/* Draw button */}
            <button
              type="button"
              onClick={() => setShowDrawing(true)}
              className="p-3 bg-gray-700/50 rounded-lg hover:bg-gray-600/50 transition-colors"
              title="Draw your object"
            >
              <Pencil className="w-6 h-6 text-gray-400" />
            </button>
            
            {/* Random button */}
            <div className="relative">
              <button 
                type="button"
                onClick={onRandom}
                className="p-3 bg-gray-700/50 rounded-lg hover:bg-gray-600/50 transition-colors"
                onMouseEnter={() => setShowTooltip(true)}
                onMouseLeave={() => setShowTooltip(false)}
              >
                <Package className="w-6 h-6 text-gray-400" />
              </button>
              
              {showTooltip && (
                <div className="absolute -top-10 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-sm py-1 px-2 rounded whitespace-nowrap">
                  I'm feeling lucky
                </div>
              )}
            </div>
          </form>
        </div>
      </div>

      {/* Drawing Canvas Modal */}
      {isLoading && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-gray-800 p-6 rounded-lg text-white text-center">
            <div className="animate-spin mb-4">
              <Package className="w-8 h-8 text-blue-500" />
            </div>
            <p>Converting your image to 3D...</p>
          </div>
        </div>
      )}
       {error && (
        <div className="fixed bottom-4 right-4 bg-red-500 text-white px-6 py-4 rounded-lg shadow-lg z-50 flex items-start gap-3">
          <AlertCircle className="w-5 h-5 flex-shrink-0 mt-0.5" />
          <div>
            <p className="font-semibold">Error</p>
            <p>{error}</p>
          </div>
          <button 
            onClick={() => setError(null)}
            className="absolute top-2 right-2 text-white/80 hover:text-white"
          >
            Ã—
          </button>
        </div>
      )}
      {showDrawing && (
        <DrawingCanvas 
          onClose={() => setShowDrawing(false)}
          onImageReady={handleImageReady}
        />
      )}
    </div>
  );
};

export default ModelflowInterface;